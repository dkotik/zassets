// Code generated by vfsgen; DO NOT EDIT.

// +build !debug,!dev

package tests

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Data holds
var Data = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2020, 3, 14, 12, 35, 10, 107577522, time.UTC),
		},
		"/include.js": &vfsgen۰CompressedFileInfo{
			name:             "include.js",
			modTime:          time.Date(2020, 3, 14, 12, 45, 38, 687532698, time.UTC),
			uncompressedSize: 493,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\xcf\xca\x1b\x21\x14\xc5\xf7\xdf\x53\x38\x2e\xc2\xbd\x70\x09\xa1\xcb\x04\xbf\x37\x28\xed\x3e\x84\x0f\xff\x5c\x13\x8b\xd1\xe0\x38\xd0\xe0\xf8\xee\x65\x26\x09\x29\xa5\x4b\xcf\x39\x9c\xf3\x53\x01\xce\x74\x41\xf5\xd9\x22\x57\x11\x94\x9f\x92\xad\x21\x27\xc0\x56\xb8\x4e\x25\x89\x7a\x09\x63\x07\x24\x56\xad\x93\x57\x60\xc9\x2d\xf1\xe0\xa1\xde\x6f\x9c\xbd\xb0\x4a\x29\x99\xa6\xab\xe1\x22\x71\xad\xd1\x8a\x8f\xf6\x44\xe6\xf0\xac\xd0\xf3\x0c\x0f\x4d\x35\xfe\x7d\xcb\xa5\x8e\xfb\xd6\x3b\x9d\x8f\xf6\xb4\xb5\x3a\x46\x08\xe4\x49\x6f\x9f\x1e\x69\x44\x32\xea\x7d\x76\x9b\x0d\x0c\x66\x9e\x07\xb3\xfd\xfa\xe2\xf1\x7b\x76\x53\x64\xdc\x6c\x60\x55\x9f\x18\x66\x50\x4a\x66\xf3\x8b\x6d\x95\x8b\x67\x54\xeb\x48\xd2\xb1\xd7\x53\xac\x32\x24\x61\xe6\xf9\xc7\xea\x6f\x1d\xfb\x90\xf8\x67\xc9\x37\x2e\xf5\x0e\xe6\x1d\xa3\x76\xe6\xba\x07\x54\x9f\xef\x79\x4e\xd3\x95\x8b\x36\x91\xf7\xc3\xae\x2f\x6c\xdd\xfd\x05\xa2\x96\xf4\xb0\x3b\xf8\x5c\x60\xbd\xbd\x08\x49\x38\xfc\xff\x94\x25\xfd\x98\x70\x47\x7d\xfa\xb7\xb9\xbf\x1e\xcc\xc3\x05\x3b\x42\xdb\x81\x21\x8d\xcd\x80\xa6\x56\x79\xac\xdf\x56\x32\xdb\xf1\xf0\xfa\x27\x61\x01\x9b\x8e\x5c\x2a\xc8\x25\x11\xd2\x59\x3c\xb8\xd9\x89\xf1\x7e\x35\x39\x4a\xec\x1f\xbd\xd3\x0e\x0f\x1f\x7f\x02\x00\x00\xff\xff\x11\x76\xab\xb2\xed\x01\x00\x00"),
		},
		"/stylesheets": &vfsgen۰DirInfo{
			name:    "stylesheets",
			modTime: time.Date(2020, 3, 14, 12, 35, 10, 107577522, time.UTC),
		},
		"/stylesheets/another.css": &vfsgen۰FileInfo{
			name:    "another.css",
			modTime: time.Date(2020, 3, 14, 12, 45, 38, 687532698, time.UTC),
			content: []byte("\x70\x7b\x70\x61\x64\x64\x69\x6e\x67\x3a\x31\x65\x6d\x7d\x0a"),
		},
		"/template.tmpl": &vfsgen۰FileInfo{
			name:    "template.tmpl",
			modTime: time.Date(2020, 3, 14, 12, 45, 38, 691532705, time.UTC),
			content: []byte("\x7b\x7b\x20\x64\x65\x66\x69\x6e\x65\x20\x60\x48\x65\x61\x64\x65\x72\x60\x20\x7d\x7d\x3c\x68\x65\x61\x64\x3e\x3c\x74\x69\x74\x6c\x65\x3e\x7b\x7b\x20\x2e\x74\x69\x74\x6c\x65\x20\x7d\x7d\x3c\x2f\x74\x69\x74\x6c\x65\x3e\x3c\x2f\x68\x65\x61\x64\x3e\x7b\x7b\x20\x65\x6e\x64\x20\x7d\x7d"),
		},
		"/test.css": &vfsgen۰FileInfo{
			name:    "test.css",
			modTime: time.Date(2020, 3, 14, 12, 45, 38, 695532712, time.UTC),
			content: []byte("\x70\x7b\x70\x61\x64\x64\x69\x6e\x67\x3a\x31\x65\x6d\x7d\x0a"),
		},
		"/test.js": &vfsgen۰CompressedFileInfo{
			name:             "test.js",
			modTime:          time.Date(2020, 3, 14, 12, 45, 38, 691532705, time.UTC),
			uncompressedSize: 496,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\xcf\x8a\x23\x21\x18\xc4\xef\x79\x0a\xdb\x43\xf8\x3e\x90\x30\x73\x4d\x70\xde\x60\xd9\xbd\x87\x30\xf8\xe7\xb3\xe3\x60\xb4\xb1\xed\x65\x83\xed\xbb\x2f\xdd\xe9\x90\x65\x99\xa3\x55\x45\xd5\x4f\x05\xe8\xc5\x15\xe5\x47\x0d\x54\x98\x97\x6e\x8a\xa6\xf8\x14\x01\x6b\xa6\x32\xe5\xc8\xca\xd5\x8f\x0d\x50\x90\xac\x4d\x38\x09\x46\xd8\x25\xee\x1d\x94\xfb\x40\xc9\x31\x23\xa5\xe4\x71\xba\x69\xca\x1c\xd7\x1a\x25\xe9\x6c\x2e\x42\x9f\xb6\x0a\x35\xcf\xf0\xd0\x64\xa5\x3f\x43\xca\x65\x3c\xd6\xd6\x44\x7f\x36\x97\x83\x51\x21\x80\x17\x4e\xa8\xc3\xe6\x09\x85\x28\xb4\x7c\x9d\xed\x7e\x0f\x9d\x9e\xe7\x4e\x1f\x3e\x3f\x69\xfc\x91\xec\x14\x08\xf7\x7b\x58\xd5\x0d\x43\x77\x52\xf2\xa4\xbf\xc8\x14\xbe\x78\x5a\xd6\x86\x82\x5b\x72\x6a\x0a\x85\xfb\xc8\xf4\x3c\xff\x5c\xfd\x83\x25\xe7\x23\xfd\xca\x69\xa0\x5c\xee\xa0\x5f\x31\x51\x7b\x2a\x47\x40\xf9\xf1\x9a\xa7\x38\xdd\x28\x2b\x1d\xe8\xd8\xbd\xb5\x85\xad\xd9\x7f\x40\xe4\x92\xee\xde\x4e\x2e\x65\x58\x6f\xcf\x7c\x64\x16\xbf\x9f\x32\x42\x3d\x26\xec\x59\x5d\xfe\x6f\x6e\xcf\x07\x73\x70\xc5\x86\x50\xdf\x01\xeb\xf3\x47\x98\x02\xac\x2a\x50\x2e\xc0\x0b\x8d\xc5\xc7\x9e\x3d\x08\xc9\xb2\xf1\x7e\xd3\x29\x70\x6c\xbb\x2d\xf1\xa5\x7e\xab\xd1\x64\x3f\x14\x8e\x42\x01\x9e\x76\xad\x89\x77\x3c\xed\xfe\x06\x00\x00\xff\xff\x27\xfc\x64\x4c\xf0\x01\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/include.js"].(os.FileInfo),
		fs["/stylesheets"].(os.FileInfo),
		fs["/template.tmpl"].(os.FileInfo),
		fs["/test.css"].(os.FileInfo),
		fs["/test.js"].(os.FileInfo),
	}
	fs["/stylesheets"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/stylesheets/another.css"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰FileInfo:
		return &vfsgen۰File{
			vfsgen۰FileInfo: f,
			Reader:          bytes.NewReader(f.content),
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰FileInfo is a static definition of an uncompressed file (because it's not worth gzip compressing).
type vfsgen۰FileInfo struct {
	name    string
	modTime time.Time
	content []byte
}

func (f *vfsgen۰FileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰FileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰FileInfo) NotWorthGzipCompressing() {}

func (f *vfsgen۰FileInfo) Name() string       { return f.name }
func (f *vfsgen۰FileInfo) Size() int64        { return int64(len(f.content)) }
func (f *vfsgen۰FileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰FileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰FileInfo) IsDir() bool        { return false }
func (f *vfsgen۰FileInfo) Sys() interface{}   { return nil }

// vfsgen۰File is an opened file instance.
type vfsgen۰File struct {
	*vfsgen۰FileInfo
	*bytes.Reader
}

func (f *vfsgen۰File) Close() error {
	return nil
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
