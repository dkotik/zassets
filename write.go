package zassets

import (
	"archive/zip"
	"io"
	"os"
	"path"
	"path/filepath"
	"strings"
)

type zipWriter struct {
	w *zip.Writer
}

func (z *zipWriter) Open(w io.Writer) error {
	z.w = zip.NewWriter(w)
	return z.w.SetComment(`Resource pack generated by github.com/dkotik/zassets.`)
}
func (z *zipWriter) Close() error { return z.w.Close() }

func (z *zipWriter) add(r io.Reader, info os.FileInfo, name string) error {
	h, err := zip.FileInfoHeader(info)
	if err != nil {
		return err
	}
	h.Name = path.Clean(name)
	h.Method = zip.Deflate
	w, err := z.w.CreateHeader(h)
	if err != nil {
		return err
	}
	_, err = io.Copy(w, r)
	return err
}

func (z *zipWriter) Add(p string) error {
	info, err := os.Stat(p)
	if err != nil {
		return err
	}
	if !info.IsDir() {
		r, err := os.Open(p)
		if err != nil {
			return err
		}
		defer r.Close()
		return z.add(r, info, info.Name())
	}
	return filepath.Walk(p, func(s string, info os.FileInfo, err error) error {
		if info.IsDir() || err != nil {
			return err
		}
		r, err := os.Open(s)
		if err != nil {
			return err
		}
		defer r.Close()
		return z.add(r, info, path.Clean(strings.TrimPrefix(s, p)))
	})
}
